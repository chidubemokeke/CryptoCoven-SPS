// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.3.3

import { Writer, Reader } from "as-proto/assembly";
import { Cryptocovenv1_Approval } from "./Cryptocovenv1_Approval";
import { Cryptocovenv1_ApprovalForAll } from "./Cryptocovenv1_ApprovalForAll";
import { Cryptocovenv1_OwnershipTransferred } from "./Cryptocovenv1_OwnershipTransferred";
import { Cryptocovenv1_Transfer } from "./Cryptocovenv1_Transfer";

export class Events {
  static encode(message: Events, writer: Writer): void {
    const cryptocovenv1Approvals = message.cryptocovenv1Approvals;
    for (let i: i32 = 0; i < cryptocovenv1Approvals.length; ++i) {
      writer.uint32(10);
      writer.fork();
      Cryptocovenv1_Approval.encode(cryptocovenv1Approvals[i], writer);
      writer.ldelim();
    }

    const cryptocovenv1ApprovalForAlls = message.cryptocovenv1ApprovalForAlls;
    for (let i: i32 = 0; i < cryptocovenv1ApprovalForAlls.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Cryptocovenv1_ApprovalForAll.encode(
        cryptocovenv1ApprovalForAlls[i],
        writer
      );
      writer.ldelim();
    }

    const cryptocovenv1OwnershipTransferreds =
      message.cryptocovenv1OwnershipTransferreds;
    for (let i: i32 = 0; i < cryptocovenv1OwnershipTransferreds.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Cryptocovenv1_OwnershipTransferred.encode(
        cryptocovenv1OwnershipTransferreds[i],
        writer
      );
      writer.ldelim();
    }

    const cryptocovenv1Transfers = message.cryptocovenv1Transfers;
    for (let i: i32 = 0; i < cryptocovenv1Transfers.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Cryptocovenv1_Transfer.encode(cryptocovenv1Transfers[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Events {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Events();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.cryptocovenv1Approvals.push(
            Cryptocovenv1_Approval.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.cryptocovenv1ApprovalForAlls.push(
            Cryptocovenv1_ApprovalForAll.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.cryptocovenv1OwnershipTransferreds.push(
            Cryptocovenv1_OwnershipTransferred.decode(reader, reader.uint32())
          );
          break;

        case 4:
          message.cryptocovenv1Transfers.push(
            Cryptocovenv1_Transfer.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  cryptocovenv1Approvals: Array<Cryptocovenv1_Approval>;
  cryptocovenv1ApprovalForAlls: Array<Cryptocovenv1_ApprovalForAll>;
  cryptocovenv1OwnershipTransferreds: Array<Cryptocovenv1_OwnershipTransferred>;
  cryptocovenv1Transfers: Array<Cryptocovenv1_Transfer>;

  constructor(
    cryptocovenv1Approvals: Array<Cryptocovenv1_Approval> = [],
    cryptocovenv1ApprovalForAlls: Array<Cryptocovenv1_ApprovalForAll> = [],
    cryptocovenv1OwnershipTransferreds: Array<Cryptocovenv1_OwnershipTransferred> = [],
    cryptocovenv1Transfers: Array<Cryptocovenv1_Transfer> = []
  ) {
    this.cryptocovenv1Approvals = cryptocovenv1Approvals;
    this.cryptocovenv1ApprovalForAlls = cryptocovenv1ApprovalForAlls;
    this.cryptocovenv1OwnershipTransferreds =
      cryptocovenv1OwnershipTransferreds;
    this.cryptocovenv1Transfers = cryptocovenv1Transfers;
  }
}
